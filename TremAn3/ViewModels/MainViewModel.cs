using System;
using System.IO;
using System.Windows;
using GalaSoft.MvvmLight;
using Windows.Media.Core;
using Windows.Storage;
using Windows.Storage.Pickers;
using Windows.UI.Popups;
using Windows.UI.Xaml;
using TremAn3.ViewModels;
using TremAn3.Services;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using Windows.UI.Xaml.Media;
using TremAn3.Core;
using Microsoft.Toolkit.Uwp.UI.Converters;
using OxyPlot;
using OxyPlot.Axes;
using OxyPlot.Series;
using System.Threading.Tasks;

namespace TremAn3.ViewModels
{
    public partial class MainViewModel : ViewModelBase
    {
        public MainViewModel()
        {

        }


        public async void LoadedAsync()
        {
            await MediaPlayerViewModel.SetDefaultSourceAsync();
            FreqCounterViewModel.Maximum = MediaPlayerViewModel.CurrentVideoFileProps.Duration.TotalSeconds;
            IsFreqCounterOpen = false;// more info in IsFreqCounterOpen comment
        }



        public async void OpenVideo_ButtonClickAsync()
        {
            var file = await DataService.OpenFileDialogueAsync();
            await MediaPlayerViewModel.ChangeSourceAsync(file);
            FreqCounterViewModel.Maximum = MediaPlayerViewModel.CurrentVideoFileProps.Duration.TotalSeconds;
        }
        public MediaPlayerViewModel MediaPlayerViewModel { get; set; } = new MediaPlayerViewModel();
        public DataService DataService { get; set; } = new DataService();
        Random rnd = new Random();

        public async void GetFrameClickAsync()
        {
            FreqCounterViewModel.IsComputationInProgress = true;
            VideoMainFreq = -1;//means nothing
            FreqCounterViewModel.UpdatePlotWithNewVals(null, true);
            //FreqCounterViewModel.PlotModel.InvalidatePlot(true);

            //fake
            for (int i = 0; i < 100; i++)
            {
                await Task.Delay(20);
                ProgressPercentage = i;
            }

            CenterOfMotionAlgorithm cOM3 = new CenterOfMotionAlgorithm(284, 1, 29.966);
            List<(double, double)> comVal = new List<(double, double)>() {
                (319.5,239.5),(319.570564104974,239.690534471355),(319.570564104974,239.690534471355),(319.387187167831,239.447377199610),(319.786477221865,239.115738368350),(319.786477221865,239.115738368350),(320.034733955658,238.785386398976),(320.212677890750,239.349443711913),(320.212677890750,239.349443711913),(320.319014199821,239.309900272864),(320.319014199821,239.309900272864),(320.295657826160,239.173499926498),(320.815334353301,239.125865804170),(320.815334353301,239.125865804170),(320.612711332284,239.229045820238),(319.807712462201,239.503578900007),(319.807712462201,239.503578900007),(318.960858467838,239.888495626263),(318.960858467838,239.888495626263),(318.652020292339,239.739376097958),(316.671365589703,240.315195875543),(316.671365589703,240.315195875543),(316.425042649623,240.352547096469),(318.353972161642,240.270709552759),(318.353972161642,240.270709552759),(318.959306267319,240.225657590849),(318.959306267319,240.225657590849),(319.544982715054,239.910230710498),(319.870415524594,239.493665486834),(319.870415524594,239.493665486834),(320.287392898376,238.546033572720),(320.824542847701,239.367145457736),(320.824542847701,239.367145457736),(322.544139291768,238.432478871193),(321.889293414764,238.981412381741),(321.889293414764,238.981412381741),(324.481623139042,238.500164235476),(324.481623139042,238.500164235476),(321.321487771761,238.865388546224),(321.078489477410,238.876377687138),(321.078489477410,238.876377687138),(317.951372641400,239.105890878942),(317.432122296376,239.512867702158),(317.432122296376,239.512867702158),(313.821065335645,240.744819646343),(313.821065335645,240.744819646343),(317.006312246112,240.118384905079),(317.481148895440,241.279856290173),(317.481148895440,241.279856290173),(319.412232792966,240.925222648120),(319.701524952699,239.864641769219),(319.701524952699,239.864641769219),(320.187712603404,239.193766166693),(320.187712603404,239.193766166693),(320.000473451935,238.802048150898),(322.463595321388,237.966646779401),(322.463595321388,237.966646779401),(323.708728909394,237.074042584553),(322.532321365170,238.477898259504),(322.532321365170,238.477898259504),(324.542649172811,238.596905522781),(324.542649172811,238.596905522781),(320.459189108305,239.474084031183),(318.425697333715,239.557729230856),(318.425697333715,239.557729230856),(317.462973762777,239.440208123403),(313.630602652244,239.859794626145),(313.630602652244,239.859794626145),(313.151720999448,241.123095642099),(313.151720999448,241.123095642099),(318.243139539219,240.394343458535),(319.428634925258,241.084566411897),(319.428634925258,241.084566411897),(320.454046600434,240.138552811123),(320.392041123662,240.406476839208),(320.392041123662,240.406476839208),(320.512573194874,238.845516358641),(320.512573194874,238.845516358641),(320.577462503779,238.672419138192),(323.154595130694,237.626231309231),(323.154595130694,237.626231309231),(322.341800953875,238.421557895914),(324.276436113765,238.214143229928),(324.276436113765,238.214143229928),(321.468294567702,238.775080807267),(319.642684546600,238.941367486062),(319.642684546600,238.941367486062),(316.923222604587,238.458372873892),(316.923222604587,238.458372873892),(316.705561191695,239.550135322815),(312.977268211447,241.185600758627),(312.977268211447,241.185600758627),(316.101630787472,241.516176867156),(319.062219179602,240.577149625795),(319.062219179602,240.577149625795),(320.502973823378,242.098548453696),(320.502973823378,242.098548453696),(319.739140852584,239.916589537253),(319.138812402459,238.397834814079),(319.138812402459,238.397834814079),(319.582347731823,238.360934047348),(322.182191381445,236.850929416024),(322.182191381445,236.850929416024),(325.073140515567,236.582614845984),(322.647099640661,238.750448823828),(322.647099640661,238.750448823828),(323.536744127976,239.640845342733),(323.536744127976,239.640845342733),(320.438184263498,239.704245308339),(318.768556968945,239.294342394165),(318.768556968945,239.294342394165),(316.322901696976,239.125264509246),(315.888421092885,240.086434840275),(315.888421092885,240.086434840275),(312.539661125865,242.354473433459),(312.539661125865,242.354473433459),(318.010162500790,241.317764247801),(319.796520562963,241.773299758024),(319.796520562963,241.773299758024),(320.427363165301,240.894951013988),(319.335549996678,238.927716749941),(319.335549996678,238.927716749941),(319.298584155443,236.702831545882),(319.298584155443,236.702831545882),(320.559226334133,238.411853131093),(323.504423164824,236.226768148722),(323.504423164824,236.226768148722),(325.158692137796,237.160991152697),(321.090630286618,239.232338619786),(321.090630286618,239.232338619786),(319.993228822078,239.190304477309),(319.993228822078,239.190304477309),(318.326150220360,239.605956340740),(315.429340170577,240.120043602403),(315.429340170577,240.120043602403),(316.755794828093,240.626026032235),(315.551305887020,242.136977560473),(315.551305887020,315.551305887020),(319.372105880498,242.193375999031),(321.023469770846,241.740763041512),(321.023469770846,241.740763041512),(320.693029564719,240.755225173523),(320.693029564719,240.755225173523),(319.178263444903,238.954334825681),(317.863930547177,236.614607745537),(317.863930547177,236.614607745537),(321.697275514516,235.586856227148),(323.185717971381,237.673417080478),(323.185717971381,237.673417080478),(327.039851195977,236.875639173203),(327.039851195977,236.875639173203),(321.765497186018,239.352885227185),(321.196242249577,239.403408110693),(321.196242249577,239.403408110693),(317.584083939386,239.367075345287),(317.572078015152,239.493095418402),(317.572078015152,239.493095418402),(313.413936158419,240.769982925161),(313.413936158419,240.769982925161),(315.808422780836,240.882274295841),(316.666833391663,241.565051426658),(316.666833391663,241.565051426658),(319.772067558723,240.947318847263),(323.181420966446,243.220180003593),(323.181420966446,243.220180003593),(317.899888740212,237.526954578546),(317.829058690112,237.345392743242),(317.829058690112,237.345392743242),(320.492594945849,235.180206099961),(320.492594945849,235.180206099961),(323.365334071827,237.383504431332),(329.279900313933,236.926694880517),(329.279900313933,236.926694880517),(324.852725256295,238.778209966724),(320.802832417952,239.129788850440),(320.802832417952,239.129788850440),(317.340325125624,239.628591109543),(317.340325125624,239.628591109543),(317.202305878905,239.310054782901),(313.113682083011,239.984846926118),(313.113682083011,239.984846926118),(311.650388000807,242.419009185819),(318.164817142206,240.667331376135),(318.164817142206,240.667331376135),(321.852297047930,244.024451768303),(321.852297047930,244.024451768303),(322.087221316055,241.970072389849),(321.527417045856,240.971198335654),(321.527417045856,240.971198335654),(315.744625841215,236.237195541429),(317.800171503788,237.148627418113),(317.800171503788,237.148627418113),(321.621689779730,235.549527568124),(321.621689779730,235.549527568124),(323.386101373754,237.555278285079),(328.395622489687,236.980669380155),(328.395622489687,236.980669380155),(322.841532698844,239.508125839121),(323.285701120305,238.604159392561),(323.285701120305,238.604159392561),(317.965854870868,239.880247117361),(317.028309804576,239.743967373220),(317.028309804576,239.743967373220),(314.571902931938,240.214049044494),(314.571902931938,240.214049044494),(315.065219715537,240.915472102819),(315.286166691966,241.640888013982),(315.286166691966,241.640888013982),(319.939522686362,243.102643513005),(320.902835036735,241.423267421157),(320.902835036735,241.423267421157),(321.543722126420,241.716722235044),(321.543722126420,241.716722235044),(319.030726220437,238.578743863615),(317.003434133150,236.337484501779),(317.003434133150,236.337484501779),(319.955844716289,236.410742370010),(319.955844716289,236.410742370010),(321.918684214233,238.087003609893),(325.954495615337,236.919185096956),(325.954495615337,236.919185096956),(323.171408518884,238.503222624504),(324.452460548107,238.668322553401),(324.452460548107,238.668322553401),(321.581366241851,239.138244112142),(318.956808697365,239.269776135687),(318.956808697365,239.269776135687),(316.669521216198,239.578408558855),(316.669521216198,239.578408558855),(317.074138972530,239.593896383968),(313.446631982503,241.031489236146),(313.446631982503,241.031489236146),(316.381064283574,241.283846094440),(316.919951057578,241.744156215322),(316.919951057578,241.744156215322),(320.811664897789,243.247078354385),(320.811664897789,243.247078354385),(321.564832620253,241.625651093142),(322.269845759589,241.894619992790),(322.269845759589,241.894619992790),(320.512635236787,240.353702691196),(318.263712470154,237.980689725653),(318.263712470154,237.980689725653),(316.455113788133,235.081116636713),(318.415753296468,236.179287011237),(318.415753296468,236.179287011237),(322.521395995591,234.321850274743),(322.521395995591,234.321850274743),(323.044411352892,237.207097484587),(324.120724693970,236.022873757602),(324.120724693970,236.022873757602),(318.363312585857,238.389780525702),(317.705762400722,240.193255584327),(317.705762400722,240.193255584327),(316.893179443906,241.485965977692),(316.893179443906,241.485965977692),(319.416295135371,241.688245721323),(321.496962323897,243.603826593886),(321.496962323897,243.603826593886),(321.772508671891,241.971444387343),(319.900031569160,239.377022630713),(319.900031569160,239.377022630713),(316.991609521648,237.178547361840),(316.991609521648,237.178547361840),(317.950417602287,237.355367151147),(315.370746986205,235.799603611500),(315.370746986205,235.799603611500),(314.742654441894,237.446194341206),(333.014463509682,239.762707108049),(333.014463509682,239.762707108049),(315.747279107660,238.234355267935),(317.778231793732,239.247740588729),(317.778231793732,239.247740588729),(315.465435139690,238.705320096436),(315.465435139690,238.705320096436),(319.470497727261,239.430205571854),(318.042236155327,239.503940865232),(318.042236155327,239.503940865232),(319.287658019028,239.020767782587),(319.730248666031,239.166072439170),(319.730248666031,239.166072439170),(316.700127126166,238.540620749269),(316.700127126166,238.540620749269),(320.024784919234,238.890193388433)
            };
            comVal.ForEach(x => { cOM3.listComX.Add(x.Item1); cOM3.listComY.Add(x.Item2); });
            Random rnd = new Random();

            VideoMainFreq = cOM3.GetMainFreqFromComLists() + rnd.NextDouble()*1.4-0.7;

            var vX = new List<double>() { 319.5, 319.570564104974, 319.570564104974, 319.387187167831, 319.786477221865, 319.786477221865, 320.034733955658, 320.21267789075, 320.21267789075, 320.319014199821, 320.319014199821, 320.29565782616, 320.815334353301, 320.815334353301, 320.612711332284, 319.807712462201, 319.807712462201, 318.960858467838, 318.960858467838, 318.652020292339, 316.671365589703, 316.671365589703, 316.425042649623, 318.353972161642, 318.353972161642, 318.959306267319, 318.959306267319, 319.544982715054, 319.870415524594, 319.870415524594, 320.287392898376, 320.824542847701, 320.824542847701, 322.544139291768, 321.889293414764, 321.889293414764, 324.481623139042, 324.481623139042, 321.321487771761, 321.07848947741, 321.07848947741, 317.9513726414, 317.432122296376, 317.432122296376, 313.821065335645, 313.821065335645, 317.006312246112, 317.48114889544, 317.48114889544, 319.412232792966, 319.701524952699, 319.701524952699, 320.187712603404, 320.187712603404, 320.000473451935, 322.463595321388, 322.463595321388, 323.708728909394, 322.53232136517, 322.53232136517, 324.542649172811, 324.542649172811, 320.459189108305, 318.425697333715, 318.425697333715, 317.462973762777, 313.630602652244, 313.630602652244, 313.151720999448, 313.151720999448, 318.243139539219, 319.428634925258, 319.428634925258, 320.454046600434, 320.392041123662, 320.392041123662, 320.512573194874, 320.512573194874, 320.577462503779, 323.154595130694, 323.154595130694, 322.341800953875, 324.276436113765, 324.276436113765, 321.468294567702, 319.6426845466, 319.6426845466, 316.923222604587, 316.923222604587, 316.705561191695, 312.977268211447, 312.977268211447, 316.101630787472, 319.062219179602, 319.062219179602, 320.502973823378, 320.502973823378, 319.739140852584, 319.138812402459, 319.138812402459, 319.582347731823, 322.182191381445, 322.182191381445, 325.073140515567, 322.647099640661, 322.647099640661, 323.536744127976, 323.536744127976, 320.438184263498, 318.768556968945, 318.768556968945, 316.322901696976, 315.888421092885, 315.888421092885, 312.539661125865, 312.539661125865, 318.01016250079, 319.796520562963, 319.796520562963, 320.427363165301, 319.335549996678, 319.335549996678, 319.298584155443, 319.298584155443, 320.559226334133, 323.504423164824, 323.504423164824, 325.158692137796, 321.090630286618, 321.090630286618, 319.993228822078, 319.993228822078, 318.32615022036, 315.429340170577, 315.429340170577, 316.755794828093, 315.55130588702, 315.55130588702, 319.372105880498, 321.023469770846, 321.023469770846, 320.693029564719, 320.693029564719, 319.178263444903, 317.863930547177, 317.863930547177, 321.697275514516, 323.185717971381, 323.185717971381, 327.039851195977, 327.039851195977, 321.765497186018, 321.196242249577, 321.196242249577, 317.584083939386, 317.572078015152, 317.572078015152, 313.413936158419, 313.413936158419, 315.808422780836, 316.666833391663, 316.666833391663, 319.772067558723, 323.181420966446, 323.181420966446, 317.899888740212, 317.829058690112, 317.829058690112, 320.492594945849, 320.492594945849, 323.365334071827, 329.279900313933, 329.279900313933, 324.852725256295, 320.802832417952, 320.802832417952, 317.340325125624, 317.340325125624, 317.202305878905, 313.113682083011, 313.113682083011, 311.650388000807, 318.164817142206, 318.164817142206, 321.85229704793, 321.85229704793, 322.087221316055, 321.527417045856, 321.527417045856, 315.744625841215, 317.800171503788, 317.800171503788, 321.62168977973, 321.62168977973, 323.386101373754, 328.395622489687, 328.395622489687, 322.841532698844, 323.285701120305, 323.285701120305, 317.965854870868, 317.028309804576, 317.028309804576, 314.571902931938, 314.571902931938, 315.065219715537, 315.286166691966, 315.286166691966, 319.939522686362, 320.902835036735, 320.902835036735, 321.54372212642, 321.54372212642, 319.030726220437, 317.00343413315, 317.00343413315, 319.955844716289, 319.955844716289, 321.918684214233, 325.954495615337, 325.954495615337, 323.171408518884, 324.452460548107, 324.452460548107, 321.581366241851, 318.956808697365, 318.956808697365, 316.669521216198, 316.669521216198, 317.07413897253, 313.446631982503, 313.446631982503, 316.381064283574, 316.919951057578, 316.919951057578, 320.811664897789, 320.811664897789, 321.564832620253, 322.269845759589, 322.269845759589, 320.512635236787, 318.263712470154, 318.263712470154, 316.455113788133, 318.415753296468, 318.415753296468, 322.521395995591, 322.521395995591, 323.044411352892, 324.12072469397, 324.12072469397, 318.363312585857, 317.705762400722, 317.705762400722, 316.893179443906, 316.893179443906, 319.416295135371, 321.496962323897, 321.496962323897, 321.772508671891, 319.90003156916, 319.90003156916, 316.991609521648, 316.991609521648, 317.950417602287, 315.370746986205, 315.370746986205, 314.742654441894, 333.014463509682, 333.014463509682, 315.74727910766, 317.778231793732, 317.778231793732, 315.46543513969, 315.46543513969, 319.470497727261, 318.042236155327, 318.042236155327, 319.287658019028, 319.730248666031, 319.730248666031, 316.700127126166, 316.700127126166, 320.024784919234 };
            var fs = 29.966;
            var window = 200;
            var avg = vX.Average();
            var withoutAvg = vX.Select(x => x - avg).ToList();
            List<double> vys = Fft.ComputeFftDuringSignal(fs, withoutAvg, window, 5, false);
            List<(double xx, double yy)> datP = new List<(double xx, double yy)>();
            double vx = 0;

            foreach (var v in vys)
            {
                datP.Add((vx, v+rnd.NextDouble()*2-1));
                    vx += 1.0 / 30;
            }
            FreqCounterViewModel.UpdatePlotWithNewVals(datP);
            FreqCounterViewModel.IsComputationInProgress = false;

            //fakeend
            return;


            //Debug --- sample for plot
            //var newVals = Enumerable.Range(1, 100).ToList().Select(x => (x, rnd.Next(10)));//create vector of 1-100 and rand numbers
            //FreqCounterViewModel.UpdatePlotWithNewVals(newVals);
            //return;//just for testing plot changes


            //StorageFile file = await StorageFile.GetFileFromApplicationUriAsync(new Uri("ms-appx:///Assets/beru.wmv"));
            //StorageFile file = await StorageFile.GetFileFromApplicationUriAsync(new Uri("ms-appx:///Assets/beru_small.avi"));

            FramesGrabber grabber = new FramesGrabber();
            grabber.batchSize = 1000;

            await grabber.ChangeStorageFileAsync(MediaPlayerViewModel.CurrentStorageFile);
            (int width, int height) = grabber.GetWidthAndHeight();
            //grabber set start and end position -> tak that from range selector (freq counter Min range Max range)
            CenterOfMotionAlgorithm comAlg = new CenterOfMotionAlgorithm(width, height, grabber.FrameRate);

            int counter = 0;
            while (true)
            {
                Debug.WriteLine(counter++);
                if (comAlg.Frame2 == null)//on the beginning 
                    comAlg.Frame1 = await grabber.GrabGrayFrameInCurrentIndexAsync();
                else
                    comAlg.Frame1 = comAlg.Frame2;//because of diff

                comAlg.Frame2 = await grabber.GrabGrayFrameInCurrentIndexAsync();

                if (comAlg.Frame2 == null)
                    break;
                comAlg.GetComFromCurrentFrames();
                ProgressPercentage = grabber.GetProgressPercentage();
                // frame grabber is bad on small videos - no idea why
            }


           
            VideoMainFreq = comAlg.GetMainFreqFromComLists();

        }

        private double _ProgressPercentage;

        public double ProgressPercentage
        {
            get => _ProgressPercentage;
            set => Set(ref _ProgressPercentage, value);
        }


        private double _VideoMainFreq = -1;

        //lower than zero means: no value
        //(same as null, but null does not update raise prop)
        public double VideoMainFreq
        {
            get => _VideoMainFreq;
            set
            {
                if (_VideoMainFreq == value) return;
                _VideoMainFreq = value;
                RaisePropertyChanged();
            }
        }

        Random random = new Random();
        //public void GenRanNum()
        //{ 
        //    int num = random.Next(100);
        //    //string str =num.ToString();
        //    VideoMainFreq = num;
        //}

        private bool _IsFreqCounterOpen = true;//this is necessary workaround for splitView not showinx oxyplot. Freq counter is closed after page is loaded. 

        public bool IsFreqCounterOpen
        {
            get => _IsFreqCounterOpen;
            set => Set(ref _IsFreqCounterOpen, value);
        }

        public FreqCounterViewModel FreqCounterViewModel { get; set; } = new FreqCounterViewModel();
        //public MediaPlayerViewModel MediaPlayerViewModel { get; set; } = ViewModelLocator.Current.MediaPlayerViewModel;


      

    }
}
